@page "/CCobros"

@using Raldy_P2_APL2.BLL
@using Raldy_P2_APL2.Models
@using Raldy_P2_APL2.Pages.Registros

@inject NavigationManager Nav
@inject IJSRuntime Confirmacion

@inject IToastService toast

<div class="card-img">
    <div class="card-header">
        <h1>CONSULTA DE COBROS</h1>
    </div>

    <div class="card-body">
        <form>
            <div class="form-row">
                <div class="form-group">
                    <label>Filtrar por Fecha</label>
                    <select class="form-control" @bind="FiltroFecha">
                        <option value="0">Todo</option>
                        <option value="1">Fecha</option>
                    </select>
                </div>
                &nbsp;
                <div class="form-group">
                    <label>Desde</label>
                    <input type="date" @bind="Desde" class="form-control" />
                </div>
                &nbsp;
                <div class="form-group">
                    <label>Hasta</label>
                    <input type="date" @bind="Hasta" class="form-control" />
                </div>
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                <div class="form-group">
                    <label>Filtro</label>
                    <select class="form-control" @bind="Filtro">
                        <option value="0">Todo</option>
                        <option value="1">Cobro ID</option>
                    </select>
                </div>
                &nbsp;
                <div class="form-group">
                    <label>Criterio</label>
                    <div class="input-group">
                        <input type="text" @bind="Criterio" class="form-control">
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="@(u => Consultar())"> Consultar</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                <table class="table table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th>Cobro Id</th>
                            <th>Fecha</th>
                            <th>Cliente Id</th>
                            <th>Total cobrado</th>
                            <th></th>

                        </tr>
                    </thead>
                    <tbody class="bg-white">
                        @foreach (var item in CobroList)
                        {
                            <tr>
                                <td>@item.CobroId</td>
                                <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                                <td>@item.ClienteId</td>
                                <td>@item.TotalCobrado</td>
                                <td>
                                    <a type="button" href="@($"Cobros/{item.CobroId}")" class="btn btn-warning oi oi-pencil"></a>
                                </td>

                            </tr>
                        }


                    </tbody>
                </table>
            </div>
        </form>
    </div>
</div>

@************************************************************************************************************************************************@

@code
{
    public List<Cobros> CobroList { get; set; }

    public List<Cobros> Cobros { get; set; }

    private DateTime Desde { get; set; } = DateTime.Now;
    private DateTime Hasta { get; set; } = DateTime.Now;

    public string Filtro { get; set; }
    private string FiltroFecha { get; set; }

    public string Criterio { get; set; }

    protected override void OnInitialized()
    {

        Nuevo();

    }


    @************************************************************************NUEVO************************************************************************@

    private void Nuevo()
    {
        CobroList = new List<Cobros>();
        Filtro = "0";
        Criterio = string.Empty;
    }

    @*************************************************************************CONSULTAR***********************************************************************@

    public void Consultar()
    {
        int id;
        int.TryParse(Criterio, out id);
        switch (Filtro)
        {
            case "0": 
                CobroList = CobrosBLL.GetList(c => true);
                break;
            case "1":
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        CobroList = CobrosBLL.GetList(c => c.CobroId == id);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un numero");
                    }
                }
                else
                {
                    CobroList = CobrosBLL.GetList(c => true).OrderBy(c => c.CobroId).ToList();
                }
                break;
        }

        switch (FiltroFecha)
        {
            case "0": 
            break;
        case "1": 
            CobroList = CobroList.Where(s => s.Fecha >= Desde && s.Fecha <= Hasta).ToList();
            break;

    }

}




@*************************************************************************ACTUALIZAR***********************************************************************@
void Actualizar()
{
    CobroList = CobrosBLL.GetList(p => true).ToList();
    Cobros = CobroList;
}

@*************************************************************************ELIMINAR***********************************************************************@

async Task Eliminar(int id)
{
    Nav.ToAbsoluteUri($"RCobros/{id}");

    bool confirmed = await Confirmacion.InvokeAsync<bool>("confirm", "Estas seguro de que deseas eliminar este cobro?");
    if (confirmed)
    {
        bool eliminado;
        eliminado = CobrosBLL.Eliminar(id);

        if (eliminado)
        {
            Actualizar();
            toast.ShowSuccess("Registro Eliminado exitosamente.");
        }
        else
            toast.ShowError("No fue posible Eliminar este Cobro.");
        return;
    }
    return;
}

@************************************************************************************************************************************************@

}
